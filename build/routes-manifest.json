{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/projects/[projectCat]",
      "regex": "^/projects/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPprojectCat": "nxtPprojectCat"
      },
      "namedRegex": "^/projects/(?<nxtPprojectCat>[^/]+?)(?:/)?$"
    },
    {
      "page": "/projects/[projectCat]/[project]",
      "regex": "^/projects/([^/]+?)/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPprojectCat": "nxtPprojectCat",
        "nxtPproject": "nxtPproject"
      },
      "namedRegex": "^/projects/(?<nxtPprojectCat>[^/]+?)/(?<nxtPproject>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/Admin/NewsAdmin",
      "regex": "^/Admin/NewsAdmin(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/Admin/NewsAdmin(?:/)?$"
    },
    {
      "page": "/Admin/ProjectsAdmin",
      "regex": "^/Admin/ProjectsAdmin(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/Admin/ProjectsAdmin(?:/)?$"
    },
    {
      "page": "/Admin/ProjectsAdmin/EquipmentAdmin",
      "regex": "^/Admin/ProjectsAdmin/EquipmentAdmin(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/Admin/ProjectsAdmin/EquipmentAdmin(?:/)?$"
    },
    {
      "page": "/Admin/ProjectsAdmin/ProjectDetailAdmin",
      "regex": "^/Admin/ProjectsAdmin/ProjectDetailAdmin(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/Admin/ProjectsAdmin/ProjectDetailAdmin(?:/)?$"
    },
    {
      "page": "/Admin/ProjectsAdmin/ProjectsNameAdmin",
      "regex": "^/Admin/ProjectsAdmin/ProjectsNameAdmin(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/Admin/ProjectsAdmin/ProjectsNameAdmin(?:/)?$"
    },
    {
      "page": "/Admin/dashboard",
      "regex": "^/Admin/dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/Admin/dashboard(?:/)?$"
    },
    {
      "page": "/Admin/login",
      "regex": "^/Admin/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/Admin/login(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/about-us",
      "regex": "^/about\\-us(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/about\\-us(?:/)?$"
    },
    {
      "page": "/collaboration",
      "regex": "^/collaboration(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/collaboration(?:/)?$"
    },
    {
      "page": "/contact-us",
      "regex": "^/contact\\-us(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contact\\-us(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/landing",
      "regex": "^/landing(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/landing(?:/)?$"
    },
    {
      "page": "/news",
      "regex": "^/news(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/news(?:/)?$"
    },
    {
      "page": "/news-archive",
      "regex": "^/news\\-archive(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/news\\-archive(?:/)?$"
    },
    {
      "page": "/projects",
      "regex": "^/projects(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/projects(?:/)?$"
    },
    {
      "page": "/services",
      "regex": "^/services(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/services(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}